plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '0.2.5-SNAPSHOT'
    id 'com.github.ben-manes.versions' version '0.22.0'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'com.matthewprenger.cursegradle' version '1.3.0'
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
    id 'org.shipkit.java' version '2.2.5'
}

configurations {
    shaded
    implementation.extendsFrom shaded
}

repositories {
    maven {
        url = 'http://maven.fabricmc.net/'
        name = 'Fabric'
    }
    maven {
        url = 'https://minecraft.curseforge.com/api/maven'
        name = 'CurseForge'
    }
    maven {
        url = 'http://maven.sargunv.s3-website-us-west-2.amazonaws.com/'
        name = 'Sargunv'
    }
    jcenter()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
group = project.maven_group

minecraft {
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation 'net.fabricmc:fabric-language-kotlin:1.3.40+build.1'
    include 'net.fabricmc:fabric-language-kotlin:1.3.40+build.1'

    modImplementation 'cloth-config:ClothConfig:0.2.4.17'
    include 'cloth-config:ClothConfig:0.2.4.17'

    modImplementation 'me.sargunvohra.mcmods:auto-config:1.2.0+mc1.14.4'
    include 'me.sargunvohra.mcmods:auto-config:1.2.0+mc1.14.4'

    modImplementation 'io.github.prospector:modmenu:1.7.5+build.114'
}

processResources {
    inputs.properties 'version': project.version,
            'archives_base_name': project.archives_base_name

    from(sourceSets.main.resources.srcDirs) {
        include 'fabric.mod.json'
        expand 'version': project.version,
                'archives_base_name': project.archives_base_name
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the 'build' task
// if it is present.
// If you remove this task, sources will not be generated.

// Tasks generated by ShipKit
/*
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

jar {
    from 'LICENSE'
}
*/

// Configure shadowing
shadowJar {
    configurations = [project.configurations.shaded]
    //relocate 'some.library', 'my.mod.shadowed.some.library'
}

remapJar {
    dependsOn shadowJar
    input = shadowJar.archiveFile
}

// Remove the ShipKit publication and recreate it with Fabric artifacts
publishing.publications.remove(publishing.publications.getByName('javaLibrary'))
tasks.remove(tasks.getByName('generateMetadataFileForJavaLibraryPublication'))
tasks.remove(tasks.getByName('generatePomFileForJavaLibraryPublication'))
tasks.remove(tasks.getByName('publishJavaLibraryPublicationToMavenLocal'))
publishing {
    publications {
        javaLibrary(MavenPublication) {
            artifact(remapJar)
            artifact(sourcesJar) {
                // Don't remap sources so ShipKit doesn't get confused by missing sources
                // Remap sources drops anything not *.java

                //builtBy remapSourcesJar
            }
        }
    }
}

// Configure CurseForge publishing
curseforge {
    // Stored in ~/.gradle/gradle.properties
    if (project.hasProperty('curseApiKey'))
        apiKey = project.curseApiKey
    else if (System.getenv("CURSE_API_KEY") != null)
        apiKey = System.getenv("CURSE_API_KEY")
    else
        println 'No CurseForge API key found, \'curseforge\' tasks will not work'

    project {
        id = project.curseforge_id
        releaseType = 'release'
        addGameVersion "$project.minecraft_version"
        mainArtifact(remapJar) {
            displayName = "$archives_base_name-$project.version"
            relations {
                requiredDependency 'fabric-api'
                embeddedLibrary 'fabric-language-kotlin'
                embeddedLibrary 'cloth-config'
                embeddedLibrary 'auto-config'
                optionalDependency 'modmenu'
            }
        }
        addArtifact sourcesJar
    }
    options {
        forgeGradleIntegration = false
    }
}

afterEvaluate {
    // CurseGradle generates tasks in afterEvaluate for each project
    // There isn't really any other way to make it depend on a task unless it is an AbstractArchiveTask
    def curseforgeTask = tasks.getByName("curseforge${project.curseforge_id}")
    curseforgeTask.dependsOn publish
    curseforgeTask.dependsOn remapJar
    tasks.getByName('bintrayPublish').dependsOn curseforgeTask
}
